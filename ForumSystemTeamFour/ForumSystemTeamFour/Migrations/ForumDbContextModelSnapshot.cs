// <auto-generated />
using System;
using ForumSystemTeamFour.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForumSystemTeamFour.Migrations
{
    [DbContext(typeof(ForumDbContext))]
    partial class ForumDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ForumSystemTeamFour.Models.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasMaxLength(8192)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ThreadId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Content = "Some of these lists are still a work in progress, as of this writing.\n\nFilm Recommendations\n\nGame Recommendations\n\nRadio Shows/Podcasts\n\nWebsites of Interest\n\nWikipedia Articles\n\nYouTube Videos & Channels",
                            CreationDate = new DateTime(2023, 6, 28, 16, 29, 2, 406, DateTimeKind.Local).AddTicks(8595),
                            Dislikes = 0,
                            IsDeleted = false,
                            Likes = 0,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ThreadId = 2
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Content = "Please note the following:\n\n• This forum desires high quality discussion. High quality posts will be praised.\n\n Low quality posts e.g. \"Is this paranormal?\" or \"I am [insert paranormal entity here] ask me anything,\" etc. will be removed.\n\n• Conspiracy theories are welcome, but please refrain from overly political discussions.• For everything else, refer to global and thread-specific rules.",
                            CreationDate = new DateTime(2023, 6, 28, 16, 30, 2, 406, DateTimeKind.Local).AddTicks(8654),
                            Dislikes = 0,
                            IsDeleted = false,
                            Likes = 0,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ThreadId = 2
                        });
                });

            modelBuilder.Entity("ForumSystemTeamFour.Models.ReplyVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ReplyId")
                        .HasColumnType("int");

                    b.Property<int>("VoteType")
                        .HasColumnType("int");

                    b.Property<string>("VoterUsername")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReplyId");

                    b.ToTable("ReplyVote");
                });

            modelBuilder.Entity("ForumSystemTeamFour.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "##ModPost"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ufo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Skinwalker"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bigfoot"
                        });
                });

            modelBuilder.Entity("ForumSystemTeamFour.Models.Thread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasMaxLength(8192)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Threads");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 2,
                            Content = "Hey guys, check out this cool new forum I found!",
                            CreationDate = new DateTime(2023, 6, 28, 16, 27, 2, 404, DateTimeKind.Local).AddTicks(9000),
                            Dislikes = 0,
                            IsDeleted = false,
                            Likes = 0,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "First lol"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Content = "This is not a forum for the faint of heart. If you need something to get started with, see the pinned threads for some basic resources. We hope you enjoy your venture into the spooks, the creeps and the unknown.",
                            CreationDate = new DateTime(2023, 6, 28, 16, 28, 2, 404, DateTimeKind.Local).AddTicks(9054),
                            Dislikes = 0,
                            IsDeleted = false,
                            Likes = 0,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Welcome to Paranormality."
                        });
                });

            modelBuilder.Entity("ForumSystemTeamFour.Models.ThreadTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "ThreadId");

                    b.HasIndex("ThreadId");

                    b.ToTable("ThreadTags");

                    b.HasData(
                        new
                        {
                            TagId = 2,
                            ThreadId = 1
                        },
                        new
                        {
                            TagId = 3,
                            ThreadId = 1
                        },
                        new
                        {
                            TagId = 4,
                            ThreadId = 1
                        },
                        new
                        {
                            TagId = 1,
                            ThreadId = 2
                        });
                });

            modelBuilder.Entity("ForumSystemTeamFour.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Password")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "FirstnameOne@Lastname.com",
                            FirstName = "FirstNameOne",
                            IsAdmin = true,
                            IsBlocked = false,
                            IsDeleted = false,
                            LastName = "LastNameOne",
                            Password = "passwordOne",
                            Username = "UsernameOne"
                        },
                        new
                        {
                            Id = 2,
                            Email = "FirstnameTwo@Lastname.com",
                            FirstName = "FirstNameTwo",
                            IsAdmin = false,
                            IsBlocked = true,
                            IsDeleted = false,
                            LastName = "LastNameTwo",
                            Password = "passwordTwo",
                            Username = "UsernameTwo"
                        },
                        new
                        {
                            Id = 3,
                            Email = "FirstnameThree@Lastname.com",
                            FirstName = "FirstNameThree",
                            IsAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            LastName = "LastNameThree",
                            Password = "passwordThree",
                            Username = "UsernameThree"
                        },
                        new
                        {
                            Id = 4,
                            Email = "FirstnameFour@Lastname.com",
                            FirstName = "FirstNameFour",
                            IsAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            LastName = "LastNameFour",
                            Password = "passwordFour",
                            Username = "UsernameFour"
                        },
                        new
                        {
                            Id = 5,
                            Email = "FirstnameFive@Lastname.com",
                            FirstName = "FirstNameFive",
                            IsAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            LastName = "LastNameFive",
                            Password = "passwordFive",
                            Username = "UsernameFive"
                        });
                });

            modelBuilder.Entity("ForumSystemTeamFour.Models.Reply", b =>
                {
                    b.HasOne("ForumSystemTeamFour.Models.User", "Author")
                        .WithMany("Replies")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ForumSystemTeamFour.Models.Thread", "Thread")
                        .WithMany("Replies")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("ForumSystemTeamFour.Models.ReplyVote", b =>
                {
                    b.HasOne("ForumSystemTeamFour.Models.Reply", null)
                        .WithMany("Votes")
                        .HasForeignKey("ReplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForumSystemTeamFour.Models.Thread", b =>
                {
                    b.HasOne("ForumSystemTeamFour.Models.User", "Author")
                        .WithMany("Threads")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ForumSystemTeamFour.Models.ThreadTag", b =>
                {
                    b.HasOne("ForumSystemTeamFour.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForumSystemTeamFour.Models.Thread", null)
                        .WithMany()
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForumSystemTeamFour.Models.Reply", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ForumSystemTeamFour.Models.Thread", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ForumSystemTeamFour.Models.User", b =>
                {
                    b.Navigation("Replies");

                    b.Navigation("Threads");
                });
#pragma warning restore 612, 618
        }
    }
}
